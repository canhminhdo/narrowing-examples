fmod LOC is
    sorts RLoc CLoc Loc .
    subsorts RLoc CLoc < Loc .
    op rs : -> RLoc [ctor] .
    op cs : -> CLoc [ctor] .
endfm 

fmod PROC is
    pr LOC .
    sorts RProc CProc Proc .
    subsorts RProc CProc < Proc .
    op < p:_ > : Loc -> Proc [ctor] .
    op < p:_ > : RLoc -> RProc [ctor] .
    op < p:_ > : CLoc -> CProc [ctor] .
endfm

fmod PROC-SET is
    pr PROC .
    sorts MTProcSet RProcSet CProcSet ProcSet .
    subsorts MTProcSet < RProcSet CProcSet < ProcSet .
    subsort RProc < RProcSet .
    subsort CProc < CProcSet .
    subsort Proc < ProcSet .
    op mt : -> MTProcSet [ctor] .
    op __ : MTProcSet MTProcSet -> MTProcSet [ctor assoc comm id: mt] .
    op __ : ProcSet ProcSet -> ProcSet [ctor ditto] .
    op __ : RProcSet RProcSet -> RProcSet [ctor ditto] .
    op __ : CProcSet CProcSet -> CProcSet [ctor ditto] .
endfm

mod TAS is
    pr PROC-SET .
    sort Config . 
    op {_|`locked:_} : ProcSet Bool -> Config [ctor] .

    vars B B' : Bool .
    vars RPROC RPROC' RPROC'' : RProc .
    vars CPROC CPROC' : CProc .
    var RPSET : RProcSet .
    var PSET : ProcSet .   
    
    rl [repeat] : 
        {< p: rs > PSET | locked: true}
    =>  {< p: rs > PSET | locked: true} [narrowing] .

    rl [enter] : 
        {< p: rs > PSET | locked: false}
    =>  {< p: cs > PSET | locked: true} [narrowing] .

    rl [exit] : 
        {< p: cs > PSET | locked: true}
    =>  {< p: rs > PSET | locked: false} [narrowing] .
endm

--- Proving cs reachable
{fold} vu-narrow in TAS : 
    {RPSET | locked: false} 
=>* {CPROC PSET | locked: B} .

--- Negatively prove the mutex property for a fixed number of processes
{fold} vu-narrow in TAS : 
    {RPROC RPROC' RPROC'' | locked: false} 
=>* {CPROC CPROC' PSET | locked: B'} .

--- Negatively prove the mutex property (Using only variables)
{fold} vu-narrow in TAS : 
    {RPSET | locked: B} 
=>* {CPROC CPROC' PSET | locked: B'} .
