fmod LOC is
    sorts RLoc WLoc RWLoc CLoc Loc .
    subsorts RLoc WLoc < RWLoc .
    subsorts RWLoc CLoc < Loc .
    op rs : -> RLoc [ctor] .
    op ws : -> WLoc [ctor] .
    op cs : -> CLoc [ctor] .
endfm

fmod PID is
    sort Pid .
    ops a b c : -> Pid .
endfm

fmod PROC is
    pr PID .
    pr LOC .
    sorts RProc WProc RWProc CProc Proc .
    subsorts RProc WProc < RWProc .
    subsorts RWProc CProc < Proc .
    op < p[_]:_ > : Pid Loc -> Proc [ctor] .
    op < p[_]:_ > : Pid RLoc -> RProc [ctor] .
    op < p[_]:_ > : Pid WLoc -> WProc [ctor] .
    op < p[_]:_ > : Pid CLoc -> CProc [ctor] .
endfm

fmod PROC-SET is
    pr PROC .
    sorts MTProcSet RProcSet WProcSet RWProcSet CProcSet ProcSet .
    subsorts RProcSet WProcSet < RWProcSet .
    subsorts RWProcSet CProcSet < ProcSet .
    subsorts MTProcSet < RProcSet WProcSet CProcSet .
    subsort RProc < RProcSet .
    subsort WProc < WProcSet .
    subsort CProc < CProcSet .
    subsort Proc < ProcSet .
    op mt : -> MTProcSet [ctor] .
    op __ : MTProcSet MTProcSet -> MTProcSet [ctor assoc comm id: mt] .
    op __ : ProcSet ProcSet -> ProcSet [ctor ditto] .
    op __ : RProcSet RProcSet -> RProcSet [ctor ditto] .
    op __ : WProcSet WProcSet -> WProcSet [ctor ditto] .
    op __ : CProcSet CProcSet -> CProcSet [ctor ditto] .
    op __ : RWProcSet RWProcSet -> RWProcSet [ctor ditto] .
endfm

fmod QUEUE is
    pr PID .
    sort Queue .
    subsort Pid < Queue .
    
    op empq : -> Queue [ctor] .
    op _|_ : Queue Queue -> Queue [ctor assoc id: empq] .
    op deq : Queue -> Queue .
endfm

mod QLOCK is
    pr QUEUE .
    pr PROC-SET .
    sort Config .
    op {_|`queue:_} : ProcSet Queue -> Config [ctor] .
    
    var P : Pid .
    vars Q Q' : Queue .
    vars RWPROC RWPROC' RWPROC'' : RWProc .
    vars CPROC CPROC' : CProc .
    var PROC : Proc .
    var RPSET : RProcSet .
    var RWPSET : RWProcSet .
    var PSET : ProcSet . 

    eq [idem] : PROC PROC = PROC .

    rl [want] : 
        {< p[P]: rs > PSET | queue: Q }
    =>  {< p[P]: ws > PSET | queue: (Q | P)} [narrowing] .

    rl [try] : 
        {< p[P]: ws > PSET | queue: (P | Q) }
    =>  {< p[P]: cs > PSET | queue: (P | Q) } [narrowing] .          

    rl [repeat] : 
        {< p[P]: ws > PSET | queue: Q }
    =>  {< p[P]: ws > PSET | queue: Q } [narrowing] . 

    rl [exit] : 
        {< p[P]: cs > PSET | queue: Q }
    =>  {< p[P]: rs > PSET | queue: deq(Q) } [narrowing] .
endm

--- Proving cs reachable (not folding)
{fold} vu-narrow [1] in QLOCK : 
    {RPSET | queue: empq}
=>* {CPROC PSET | queue: Q} .

--- Proving cs reachable
{fold} vu-narrow in QLOCK : 
    {RWPSET | queue: Q}
=>* {CPROC PSET | queue: Q'} .

--- Negatively prove the mutex property for a fixed number of processes
{fold} vu-narrow in QLOCK : 
    {RWPROC RWPROC' RWPROC'' | queue: empq}
=>* {CPROC CPROC' PSET | queue: Q} .

--- Negatively prove the mutex property
{fold} vu-narrow in QLOCK : 
    {RWPSET | queue: Q}
=>* {CPROC CPROC' PSET | queue: Q'} .

{path} vu-narrow [,1]in QLOCK : 
    {RWPSET < p[P]: cs > | queue: P | Q}
=>* C:Config .
