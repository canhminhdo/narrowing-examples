fmod LOC is
    sorts RsLoc WsLoc RWLoc CsLoc Loc .
    subsorts RsLoc WsLoc < RWLoc .
    subsorts RWLoc CsLoc < Loc .

    op rs : -> RsLoc [ctor] .
    op ws : -> WsLoc [ctor] .
    op cs : -> CsLoc [ctor] .
endfm

fmod PID is
    sort Pid .
    ops a b c : -> Pid .
endfm

fmod PROC is
    pr PID .
    pr LOC .
    sorts RsProc WsProc RWProc CsProc Proc .
    subsorts RsProc WsProc < RWProc .
    subsorts RWProc CsProc < Proc .

    op pc[_]:_ : Pid Loc -> Proc [ctor] .
    op pc[_]:_ : Pid RsLoc -> RsProc [ctor] .
    op pc[_]:_ : Pid WsLoc -> WsProc [ctor] .
    op pc[_]:_ : Pid CsLoc -> CsProc [ctor] .
endfm

fmod PROC-SET is
    pr PROC .

    sorts RsProcSet WsProcSet RWProcSet CsProcSet ProcSet .
    subsorts RsProcSet WsProcSet < RWProcSet .
    subsorts RWProcSet CsProcSet < ProcSet .
    subsort RsProc < RsProcSet .
    subsort WsProc < WsProcSet .
    subsort CsProc < CsProcSet .
    subsort Proc < ProcSet .

    op void : -> ProcSet [ctor] .
    op __ : ProcSet ProcSet -> ProcSet [ctor assoc comm id: void] .
    op __ : RsProcSet RsProcSet -> RsProcSet [ctor ditto] .
    op __ : WsProcSet WsProcSet -> WsProcSet [ctor ditto] .
    op __ : CsProcSet CsProcSet -> CsProcSet [ctor ditto] .
    op __ : RWProcSet RWProcSet -> RWProcSet [ctor ditto] .
endfm

fmod QUEUE {D :: TRIV} is
    sort Queue{D} .
    subsort D$Elt < Queue{D} .
    
    op empq : -> Queue{D} [ctor] .
    op _|_ : Queue{D} Queue{D} -> Queue{D} [ctor assoc id: empq] .
    op deq : Queue{D} -> Queue{D} .
    
    var Q : Queue{D} .
    var E : D$Elt . 
    
    eq deq(empq) = empq .
    eq deq(E | Q) = Q .
endfm

view Pid from TRIV to PID is
    sort Elt to Pid .
endv

mod QLOCK is
    pr QUEUE{Pid} .
    pr PROC-SET .

    sort Config .
    
    op {_|`queue:_} : ProcSet Queue{Pid} -> Config [ctor] .
    
    vars P P1 P2 P3 : Pid .
    vars Q Q1 Q2 : Queue{Pid} .
    vars CPROC1 CPROC2 : CsProc .
    var PROC : Proc .
    var RsPSET : RsProcSet .
    var RWPSET : RWProcSet .
    var PSET : ProcSet . 

    eq [idem] : PROC PROC = PROC .

    rl [want] : 
        {(pc[P]: rs) PSET | queue: Q }
    =>  {(pc[P]: ws) PSET | queue: (Q | P)} [narrowing] .

    rl [try] : 
        {(pc[P]: ws) PSET | queue: (P | Q) }
    =>  {(pc[P]: cs) PSET | queue: (P | Q) } [narrowing] .          

    rl [exit] : 
        {(pc[P]: cs) PSET | queue: Q }
    =>  {(pc[P]: rs) PSET | queue: deq(Q) } [narrowing] .
endm

--- Proving cs reachable (initial set)
{fold} vu-narrow [1] in QLOCK : 
    {RsPSET | queue: empq}
=>* {(pc[P]: cs) PSET | queue: Q} .

--- Proving cs reachable (only variables)
{fold} vu-narrow in QLOCK : 
    {RWPSET | queue: Q1}
=>* {(pc[P]: cs) PSET | queue: Q2} .

--- Negatively prove the mutex property for a fixed number of processes
{fold} vu-narrow in QLOCK : 
    {(pc[a]: rs) (pc[b]: rs) (pc[c]: rs) | queue: empq}
=>* {(pc[P1]: cs) (pc[P2]: cs) (pc[P3]: rs) | queue: Q} .

--- Negatively prove the mutex property (Using only variables)
{fold} vu-narrow in QLOCK : 
    {RWPSET | queue: Q1}
=>* {CPROC1 CPROC2 PSET | queue: Q2} .

--- Negatively prove the mutex property (Using only variables)
{fold} vu-narrow in QLOCK : 
    {RWPSET | queue: Q1}
=>* {CPROC1 CPROC2 PSET | queue: Q2} .