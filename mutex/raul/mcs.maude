fmod IBOOL is
    sorts True False IBool .
    subsorts True False < IBool .

    op true : -> True [ctor] . 
    op false : -> False [ctor] .
endfm

fmod NAT-FVP is
    pr IBOOL .
    sorts Zero NzNat Nat . 
    subsort Zero NzNat < Nat .

    op 0 : -> Zero [ctor] .
    op 1 : -> NzNat [ctor] .
    op _+_ : Nat Nat -> Nat [ctor assoc comm id: 0] .
    op _+_ : NzNat Nat -> NzNat [ctor ditto] .

    vars N N' : Nat .
    vars NzN : NzNat .

    op _=?=_ : Nat Nat -> IBool .
    eq N =?= N = true [variant] .
    eq N + NzN =?= N = false [variant] .
endfm

fmod LOC is
    pr IBOOL .
    sorts RsLoc WsLoc CsLoc NCLoc CLoc Loc .
    subsorts RsLoc WsLoc < NCLoc < Loc .
    subsorts CsLoc < CLoc < Loc .

    op rs : -> RsLoc [ctor] .
    op l1 : -> RsLoc [ctor] .
    op l2 : -> RsLoc [ctor] .
    op l3 : -> RsLoc [ctor] .
    op l4 : -> WsLoc [ctor] .
    op l5 : -> WsLoc [ctor] .
    op l6 : -> WsLoc [ctor] .
    op l7 : -> CsLoc [ctor] .
    op l8 : -> CsLoc [ctor] .
    op l9 : -> CsLoc [ctor] .
    op l10 : -> CsLoc [ctor] .
    op l11 : -> CsLoc [ctor] .
    op l12 : -> CsLoc [ctor] .
    op cs : -> CsLoc [ctor] .

    vars L L' : Loc .
    op iif_then_else_fi : IBool Loc Loc -> Loc .
    eq iif true then L else L' fi = L [variant] .
    eq iif false then L else L' fi = L' [variant] .
endfm

fmod PROC is
    pr LOC .
    pr NAT-FVP .
    sorts RsProc WsProc CsProc CProc NCProc Proc .
    subsorts RsProc WsProc < NCProc < Proc .
    subsorts CsProc < CProc < Proc .

    op (_| pc:_, next:_, pred:_, lock:_) : NzNat RsLoc Nat Nat IBool -> RsProc [ctor] .
    op (_| pc:_, next:_, pred:_, lock:_) : NzNat WsLoc Nat Nat IBool -> WsProc [ctor] .
    op (_| pc:_, next:_, pred:_, lock:_) : NzNat CsLoc Nat Nat IBool -> CsProc [ctor] .
    op (_| pc:_, next:_, pred:_, lock:_) : NzNat Loc Nat Nat IBool -> Proc [ctor] .
endfm

fmod PROC-SET is
    pr PROC .
    sorts EmpProcSet RsProcSet WsProcSet CsProcSet NCProcSet CProcSet ProcSet  .
    subsorts EmpProcSet < RsProcSet .
    subsorts RsProcSet WsProcSet < NCProcSet < ProcSet .
    subsorts CsProcSet < CProcSet < ProcSet .
    subsort RsProc < RsProcSet .
    subsort WsProc < WsProcSet .
    subsort CsProc < CsProcSet .
    subsort Proc < ProcSet .

    op emp : -> EmpProcSet [ctor] .
    op __ : EmpProcSet EmpProcSet -> EmpProcSet [ctor assoc comm id: emp] .
    op __ : RsProcSet RsProcSet -> RsProcSet [ctor ditto] .
    op __ : WsProcSet WsProcSet -> WsProcSet [ctor ditto] .
    op __ : CsProcSet CsProcSet -> CsProcSet [ctor ditto] .
    op __ : ProcSet ProcSet -> ProcSet [ctor ditto] .
endfm

mod MCS is
    pr PROC-SET .
    sort Config . 
    
    op {_|`glock:_} : ProcSet Nat -> Config [ctor] .

    var NCPS : NCProcSet .
    var RsPS : RsProcSet .
    vars P Q NZ NZ' NZ1 NzN : NzNat .
    vars N N1 N2 N3 N4 N5 N' N1' N2' N3' N4' N5' : Nat .
    vars PSET PSET' : ProcSet .
    vars B  B' : IBool .
    vars L L' : Loc .
    vars CL CL' : CLoc .
    vars NCL NCL' : NCLoc .

    --- want
    rl [want] : 
        { (NZ | pc: rs, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  { (NZ | pc: l1, next: N1, pred: N2, lock: B) PSET | glock: N3 } [narrowing] .

    --- stnxt
    rl [stnxt] : 
        { (NZ | pc: l1, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  { (NZ | pc: l2, next: 0,  pred: N2, lock: B) PSET | glock: N3 } [narrowing] .
    
    --- stprd
    rl [stprd] : 
        { (NZ | pc: l2, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  { (NZ | pc: l3, next: N1, pred: N3, lock: B) PSET | glock: NZ } [narrowing] .

    --- chprd
    rl [chprd] :  
        { (NZ | pc: l3, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  if N2 == 0
        then
           { (NZ | pc: cs, next: N1, pred: N2, lock: B) PSET | glock: N3 }
        else
           { (NZ | pc: l4, next: N1, pred: N2, lock: B) PSET | glock: N3 }
        fi [narrowing] .

    --- stlck
    rl [stlck] :  
        { (NZ | pc: l4, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  { (NZ | pc: l5, next: N1, pred: N2, lock: true) PSET | glock: N3 } [narrowing] .

    --- stnpr
    rl [stnpr] :  
        { (NZ | pc: l5, next: N1, pred: NZ', lock: B)
          (NZ' | pc: L', next: N1', pred: N2', lock: B') PSET | glock: N3 }
    =>  { (NZ | pc: l6, next: N1, pred: NZ', lock: B)
          (NZ' | pc: L', next: NZ, pred: N2', lock: B') PSET | glock: N3 } [narrowing] .

    --- chlck
    rl [chlck] :  
        { (NZ | pc: l6, next: N1, pred: N2, lock: false) PSET | glock: N3 }
    =>  { (NZ | pc: cs, next: N1, pred: N2, lock: false) PSET | glock: N3 } [narrowing] .

    --- exit
    rl [exit] :
        { (NZ | pc: cs, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  { (NZ | pc: l7, next: N1, pred: N2, lock: B) PSET | glock: N3 } [narrowing] .

    --- rpnxt
    rl [rpnxt] :  
        { (NZ | pc: l7, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    => if N1 == 0
        then
           { (NZ | pc: l8, next: N1, pred: N2, lock: B) PSET | glock: N3 }
        else
           { (NZ | pc: l11, next: N1, pred: N2, lock: B) PSET | glock: N3 }
        fi [narrowing] . 
    
    --- chglk
    rl [chglk] :  
        { (NZ | pc: l8, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  if N3 == NZ
        then
           { (NZ | pc: l9, next: N1, pred: N2, lock: B) PSET | glock: 0 }
        else
           { (NZ | pc: l10, next: N1, pred: N2, lock: B) PSET | glock: N3 }
        fi [narrowing] . 

    --- go2rs1
    rl [go2rs1] :  
        { (NZ | pc: l9, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  { (NZ | pc: rs, next: N1, pred: N2, lock: B) PSET | glock: N3 } [narrowing] .

    --- rpnxt
    rl [rpnxt] :  
        { (NZ | pc: l10, next: NZ', pred: N2, lock: B) PSET | glock: N3 }
    =>  { (NZ | pc: l11, next: NZ', pred: N2, lock: B) PSET | glock: N3 } [narrowing] .

    --- stlnx
    rl [stlnx] :  
        { (NZ | pc: l11, next: NZ', pred: N2, lock: B)
          (NZ' | pc: L', next: N1', pred: N2', lock: B') PSET | glock: N3 }
    =>  { (NZ | pc: l12, next: NZ', pred: N2, lock: B)
          (NZ' | pc: L', next: NZ, pred: N2', lock: false) PSET | glock: N3 } [narrowing] .
    
    --- go2rs2
    rl [go2rs2] :  
        { (NZ | pc: l12, next: N1, pred: N2, lock: B) PSET | glock: N3 }
    =>  { (NZ | pc: rs, next: N1, pred: N2, lock: B) PSET | glock: N3 } [narrowing] .
endm

--- Fairness of protocol behavior
{fold,path} vu-narrow {filter,delay} [1] in MCS : 
{ NCPS | glock: 0 }
=>* 
{(NZ | pc: cs, next: N1, pred: N2, lock: B) PSET | glock: N3} .

--- Negatively prove the mutex property
{fold,path} vu-narrow {filter,delay} [1] in MCS : 
{ NCPS | glock: N4 }
=>*
{ (NZ | pc: cs, next: N1, pred: N2, lock: B) 
  (NZ' | pc: cs, next: N1', pred: N1', lock: B') PSET | glock: N3} .